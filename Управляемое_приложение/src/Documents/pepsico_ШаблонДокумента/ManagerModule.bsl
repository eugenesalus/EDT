#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Функция определяет реквизиты выбранного документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнутреннееПотреблениеТоваров - Ссылка на документ.
//
// Возвращаемое значение:
//	Структура - реквизиты внутреннего потребления товаров.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация
	|ИЗ
	|	Документ.тгШаблонДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка";
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Дата		= Выборка.Дата;
		Организация = Выборка.Организация;
	Иначе
		Дата		= Дата(1, 1, 1);
		Организация = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Дата, Организация",
		Дата,
		Организация);
	
	Возврат СтруктураРеквизитов;

КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	// пример:
	//МеханизмыДокумента.Добавить("pepsico_Холдирование");
	
	// Механизмы проведения необходимо добавить в расширении в ПроведениеДокументовЛокализация.pepsico_ДополнитьУчетныеМеханизмыКонфигурации()
	// одним из следующих способов:
	//		МеханизмыКонфигурации.Вставить("pepsico_Холдирование", "pepsico_Холдирование");
	//		МеханизмыКонфигурации.Вставить("pepsico_Холдирование", "РегистрыНакопления.pepsico_Холдирование");
	//		МеханизмыКонфигурации.Вставить("pepsico_Холдирование", "Документы.pepsico_ОперацияХолдирования");
	//
	// Если по регистру движения делает один документ, данную область проведения добавляем в модуль менеджера документа и регистрируем 
	// его в механизмах конфигурации.
	// Если по регистру движения делают несколько документов, можно сделать общий модуль (пример - pepsico_Холдирование), который будет 
	// использоваться при формировании движений этими документами
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблица_pepsico_РегистрНакопления(Запрос, ТекстыЗапроса, Регистры);
		// См. пример в документе "pepsico_ОперацияХолдирования" в соответствующей процедуре.
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);

КонецФункции

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тгШаблонДокумента.Ссылка КАК Ссылка,
	|	тгШаблонДокумента.Дата КАК Период,
	|	тгШаблонДокумента.Номер КАК Номер,
	|	тгШаблонДокумента.Организация КАК Организация,
	|	тгШаблонДокумента.Комментарий КАК Комментарий,
	|	тгШаблонДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	тгШаблонДокумента.Проведен КАК Проведен
	|ИЗ
	|	Документ.тгШаблонДокумента КАК тгШаблонДокумента
	|ГДЕ
	|	тгШаблонДокумента.Ссылка = &Ссылка";
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период"			, Реквизиты.Период);
	Запрос.УстановитьПараметр("Номер"			, Реквизиты.Номер);
	Запрос.УстановитьПараметр("Организация"		, Реквизиты.Организация);
	Запрос.УстановитьПараметр("Комментарий"		, Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления"	, Реквизиты.ПометкаУдаления);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ТекстЗапросаТаблица_pepsico_РегистрНакопления(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "pepsico_РегистрНакопления";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область МеханизмПроведения

// Пример можно посмотреть в ОМ ЗапасыСервер, область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - см. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - см. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		// добавить подчиненные регистры, по которым записывать движения (запись в процедуре ОтразитьДвижения())
		//Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.pepsico_Холдирование);
		
		// добавить независимые регистры сведений, по которым из текстов запросов сформируются ТаблицыДляДвижений. Запись в процедуре ЗаписатьДанные()
		//Параметры.НезависимыеРегистры.Добавить(Метаданные.РегистрыСведений.pepsico_РегистрСведений);
		
	КонецЕсли;
		
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "pepsico_Холдирование");
	
КонецПроцедуры

// Процедура формирования движений по независимым регистрам.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Документ - ДокументСсылка - ссылка на документ
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ЗаписатьДанные(ТаблицыДляДвижений, Документ, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Если ТаблицыДляДвижений.Свойство("ТаблицаДатыПоступленияТоваровОрганизаций")
	//	И ЗначениеЗаполнено(ТаблицыДляДвижений.ТаблицаДатыПоступленияТоваровОрганизаций) Тогда
	//	
	//	Для Каждого СтрокаТаблицы Из ТаблицыДляДвижений.ТаблицаДатыПоступленияТоваровОрганизаций Цикл
	//		МенеджерЗаписи = РегистрыСведений.ДатыПоступленияТоваровОрганизаций.СоздатьМенеджерЗаписи();
	//		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);
	//		МенеджерЗаписи.Записать(Истина);
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Добавляет команду создания документа "Заказ клиента".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.тгШаблонДокумента) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.тгШаблонДокумента.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.тгШаблонДокумента);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = ""; // Имя функциональной опции (указать при необходимости)
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	// Для отображения в формах нового документа в подменю "Отчеты" команды "Связанные документы"
	// В расширении необходимо добавить информацию о документе
	// ВариантыОтчетовПереопределяемый.рткОпределитьОбъектыСКомандамиОтчетовПосле
	//ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

#КонецОбласти
	
#КонецОбласти

#КонецЕсли