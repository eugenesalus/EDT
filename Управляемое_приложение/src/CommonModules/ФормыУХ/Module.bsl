#Область ПрограммныйИнтерфейс

#Область НастройкиПолейФормы
// Возвращает массив строк настроек полей формы, которые используются к ИскомомуПолю и его свойству
Функция ПолучитьНастройкиПоля(Настройки, ИскомоеПоле, Свойство = неопределено) экспорт
	
	Результат = Новый Массив;
	
	ИскатьПоСвойству = Свойство <> неопределено;
	
	//
	Для Каждого Строка Из Настройки Цикл
		
		Если ИскатьПоСвойству И НЕ Строка.Свойства.Свойство(Свойство) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Поле Из Строка.Поля Цикл
			Если Поле = ИскомоеПоле Тогда
				Результат.Добавить(Строка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Удаляет  строки настроек полей формы, которые относятся к ИскомомуПолю и его свойству
Функция УдалитьНастройкиПоля(Настройки, ИскомоеПоле, Свойство = Неопределено) экспорт
	
	МассивНастроек = ПолучитьНастройкиПоля(Настройки, ИскомоеПоле, Свойство);
	МассивПустыхНастроек = Новый Массив;
	
	Для каждого СтрокаНастройки Из МассивНастроек Цикл
		ИндексПоля = СтрокаНастройки.Поля.Найти(ИскомоеПоле);
		СтрокаНастройки.Поля.Удалить(ИндексПоля);
		Если НЕ ЗначениеЗаполнено(СтрокаНастройки.Поля) Тогда // не осталось настраиваемых полей
			МассивПустыхНастроек.Добавить(СтрокаНастройки);
		КонецЕсли;	
	КонецЦикла;
	
	// удаляем пустые настройки
	Для каждого СтрокаНастройки Из МассивПустыхНастроек Цикл
		 Настройки.Удалить(СтрокаНастройки);
	КонецЦикла;
	
КонецФункции	

// Возвращает см. 
// Получить условие.
// 
// Параметры:
//  Настройка Настройка
//  ИмяПоля Имя поля
// 
// Возвращаемое значение:
//  
Функция ПолучитьУсловие(Настройка, ИмяПоля) экспорт
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого Условие Из Настройка.Условие.Элементы Цикл
		
		Если Условие.ЛевоеЗначение = ПолеКомпоновки Тогда
			Возврат Условие;
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение "Ошибка встраивания УХ";
	
КонецФункции

// Возвращает ссылку на новый элемент отбора в переданном отборе схемы компоновки данных.
//
// Параметры:
//  Отбор - ОтборКомпоновкиДанных - отбор схемы компоновки, в который необходимо добавить новый элемент
//  ЛевоеЗначение - Строка, ПолеКомпоновкиДанных - поле компоновки, по которому необходимо установить отбор (необязательное)
//  ПравоеЗначение  - Произвольный, Строка, ПолеКомпоновкиДанных - значение отбора (необязательное) или поле компоновки
//  ТипОтбора  - ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных - тип нового элемента отбора (необязательное)
//  ВидСравнения  - ВидСравненияКомпоновкиДанных - вид сравнения левого и правого значения
//  ПравоеЗначениеПоле  - Булево - указывает использовать ли в качестве правого значения поле компоновки данных.
//
// Возвращаемое значение:
//  ЭлементОтбораКомпоновкиДанных - ссылка на новый элемент отбора схемы компоновки данных.
//
Функция НовыйОтбор(Отбор, ЛевоеЗначение, ПравоеЗначение = Неопределено, ТипОтбора = Неопределено, ВидСравнения = Неопределено, ПравоеЗначениеПоле = Ложь) Экспорт
	
	Если ТипОтбора = Неопределено Тогда
		ТипОтбора = Тип("ЭлементОтбораКомпоновкиДанных");
	КонецЕсли;
	
	НовыйОтбор = Отбор.Элементы.Добавить(ТипОтбора);
	Если ЛевоеЗначение <> Неопределено Тогда
		Если ТипЗнч(ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			НовыйОтбор.ЛевоеЗначение = ЛевоеЗначение;
		Иначе
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Если ПравоеЗначениеПоле Тогда
			Если ТипЗнч(ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
				НовыйОтбор.ПравоеЗначение = ПравоеЗначение;
			Иначе
				НовыйОтбор.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПравоеЗначение);
			КонецЕсли;
		Иначе
			НовыйОтбор.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипОтбора = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Если ВидСравнения = Неопределено Тогда
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			Если ТипЗнч(ПравоеЗначение) = Тип("Массив") ИЛИ ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			КонецЕсли;
		Иначе
			НовыйОтбор.ВидСравнения = ВидСравнения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовыйОтбор;
	
КонецФункции

// 
Функция НоваяГруппаИЛИ(Отбор) Экспорт
	
	ГруппаИли = ФормыУХ.НовыйОтбор(Отбор,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Возврат ГруппаИли;
	
КонецФункции

// 
Функция НоваяГруппаИ(Отбор) Экспорт
	
	ГруппаИ = ФормыУХ.НовыйОтбор(Отбор,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	Возврат ГруппаИ;
	
КонецФункции

// 
Функция НоваяГруппаНЕ(Отбор) Экспорт
	
	ГруппаНЕ = ФормыУХ.НовыйОтбор(Отбор,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаНЕ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНЕ;
	
	Возврат ГруппаНЕ;
	
КонецФункции

// Возвращает ссылку на элемент отбора в переданном отборе схемы компоновки данных
//
// Параметры:
//  ОтборКД - <ОтборКомпоновкиДанных> - отбор схемы компоновки в который необходимо добавить новый элемент
//  ИмяЭлемента - <Строка> - имя поля компоновки по которому необходимо найти элемент отбора
//  ЗначениеОтбора - <ПроизвольноеЗначение> - установленное значение отбора по которому необходимо найти элемент отбора
//  ВидСравнения - <ВидСравненияКомпоновкиДанных> - установленный вид сравнения по которому необходимо найти элемент отбора.
//
// Возвращаемое значение:
//   <ЭлементОтбораКомпоновкиДанных> - ссылка на найденный элемент отбора схемы компоновки данных.
//
Функция НайтиЭлементОтбора(ОтборКД, ИмяЭлемента, ЗначениеОтбора = "#НеУчитывать#", ВидСравнения = Неопределено) Экспорт
	
	Результат = Неопределено;
	Для Каждого ЭлементОтбора Из ОтборКД.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = НайтиЭлементОтбора(ЭлементОтбора, ИмяЭлемента);
			Если Результат <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяЭлемента) Тогда
			Если ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора ИЛИ ЗначениеОтбора = "#НеУчитывать#" Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравнения ИЛИ ВидСравнения = Неопределено Тогда
					Результат = ЭлементОтбора;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Добавляет ЗависимыеПоля в зависимость от поля ГлавноеПоле
Процедура ДобавитьЗависимыеПоля(Зависимости, ГлавноеПоле, ЗависимыеПоля) Экспорт
	
	Зависимость = Зависимости.Найти(ГлавноеПоле);
	Если Зависимость = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из Новый Структура(ЗависимыеПоля) Цикл
		Зависимость.ЗависимыеПоля.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

// Функция возвращает структуру с параметрами элементов по умолчанию
Функция ПолучитьПараметрыЭлементовПоУмолчанию() Экспорт
	
	//
	ПараметрыПоляВвода = Новый Структура;
	
	// Поле ввода 28
	ПараметрыПоляВвода28 = Новый Структура;
	ПараметрыПоляВвода28.Вставить("ПоложениеЗаголовка", 	ПоложениеЗаголовкаЭлементаФормы.Лево);
	ПараметрыПоляВвода28.Вставить("АвтоМаксимальнаяШирина",	Ложь);
	ПараметрыПоляВвода28.Вставить("МаксимальнаяШирина",		28);
	
	// Флажок
	ПараметрыПоляФлажка = Новый Структура;
	ПараметрыПоляФлажка.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Право);
	
	// Вертикальная группа
	ПараметрыГВ = Новый Структура;
	ПараметрыГВ.Вставить("Группировка",			ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГВ.Вставить("ОтображатьЗаголовок",	Истина);
	ПараметрыГВ.Вставить("Объединенная",		Истина);
	ПараметрыГВ.Вставить("Отображение",			ОтображениеОбычнойГруппы.Нет);
	
	// Горизонтальная группа
	ПараметрыГГ = Новый Структура;
	ПараметрыГГ.Вставить("Группировка",			ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ПараметрыГГ.Вставить("ОтображатьЗаголовок",	Истина);
	ПараметрыГГ.Вставить("Объединенная",		Истина);
	ПараметрыГГ.Вставить("Отображение",			ОтображениеОбычнойГруппы.Нет);
	
	//
	ПараметрыПоляВводаНевидимого = Новый Структура;
	ПараметрыПоляВводаНевидимого.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
	ПараметрыПоляВводаНевидимого.Вставить("ТолькоПросмотр", Истина);
	ПараметрыПоляВводаНевидимого.Вставить("Доступность", Ложь);
	ПараметрыПоляВводаНевидимого.Вставить("ПропускатьПриВводе", Истина);
	ПараметрыПоляВводаНевидимого.Вставить("ЦветРамки", ЦветаСтиля.ЦветФонаФормы);
	
	//
	ПараметрыПоляВводаВидОперацииУХ = Новый Структура;
	ПараметрыПоляВводаВидОперацииУХ.Вставить("ЦветФона", ЦветаСтиля.ФонУправляющегоПоля);
	
	// Параметры элементов, которые можно использовать в формах
	ПараметрыЭлементов = Новый Структура;
	ПараметрыЭлементов.Вставить("ПолеФлажка",			ПараметрыПоляФлажка);
	ПараметрыЭлементов.Вставить("ПолеВвода",			ПараметрыПоляВвода);
	ПараметрыЭлементов.Вставить("ПолеВвода28",			ПараметрыПоляВвода28);
	ПараметрыЭлементов.Вставить("ГруппаВ",				ПараметрыГВ);
	ПараметрыЭлементов.Вставить("ГруппаГ",				ПараметрыГГ);
	
	ПараметрыЭлементов.Вставить("ПолеВводаНевидимое",	
		ДополнитьСтруктуру(ПараметрыПоляВвода28, ПараметрыПоляВводаНевидимого));
		
	ПараметрыЭлементов.Вставить("ПолеВводаВидаОперацииУХ",
		ДополнитьСтруктуру(ПараметрыПоляВвода28, ПараметрыПоляВводаВидОперацииУХ));
	
	ПараметрыЭлементов.Вставить("ПолеВводаНевидимое",	
		ДополнитьСтруктуру(ПараметрыПоляВвода28, ПараметрыПоляВводаНевидимого));
		
	ПараметрыЭлементов.Вставить("ПолеВводаВидаОперацииУХ",
		ДополнитьСтруктуру(ПараметрыПоляВвода28, ПараметрыПоляВводаВидОперацииУХ));
		
	Возврат ПараметрыЭлементов;
	
КонецФункции

// Процедура добавляет реквизит в параметры запрета редактирования
// Параметры
//		Форма - УправляемаяФорма - Форма
//		ИмяРеквизита - Строка - Имя блокируемого реквизита
//		БлокируемыеЭлементы - Строка - Один или несколько элементов формы через запятую. Элементы, которые будут заблокированы
Процедура ДобавитьРеквизитВПараметрыЗапретаРедактирования(Форма, ИмяРеквизита, БлокируемыеЭлементы) Экспорт
	
	Элементы = Форма.Элементы;
	
	РедактированиеРазрешено = НЕ ЗначениеЗаполнено(Форма.Параметры.Ключ);
	
	//
	ОписаниеРеквизита = Форма.ПараметрыЗапретаРедактированияРеквизитов.Добавить();
	ОписаниеРеквизита.ИмяРеквизита = ИмяРеквизита;
	ОписаниеРеквизита.ПравоРедактирования = Истина;
	ОписаниеРеквизита.РедактированиеРазрешено = РедактированиеРазрешено;
	
	СтруктураЭлементов = Новый Структура(БлокируемыеЭлементы);
	Для Каждого КлючЗначение Из СтруктураЭлементов Цикл
		
		Элемент = Элементы.Найти(КлючЗначение.Ключ);
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеРеквизита.БлокируемыеЭлементы.Добавить(КлючЗначение.Ключ);
		Элемент.ТолькоПросмотр = НЕ РедактированиеРазрешено;
		
	КонецЦикла;
	
	ОписаниеРеквизита.Представление = "";
	
КонецПроцедуры

// Функция создает ТаблицуФормы
Функция СоздатьТаблицуФормы(Элементы, Имя, Заголовок = "", ПутьКДанным, Родитель, ВставитьПередЭлементом = Неопределено, ПараметрыЭлемента = Неопределено, События = Неопределено) Экспорт
	
	Если ВставитьПередЭлементом = Неопределено Тогда
		ТаблицаФормы = Элементы.Добавить(Имя, Тип("ТаблицаФормы"), Родитель);
	Иначе
		ТаблицаФормы = Элементы.Вставить(Имя, Тип("ТаблицаФормы"), Родитель, ВставитьПередЭлементом);
	КонецЕсли;
	
	ТаблицаФормы.ПутьКДанным = ПутьКДанным;
	ТаблицаФормы.Заголовок = Заголовок;
	
	Если ТипЗнч(ПараметрыЭлемента) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ТаблицаФормы, ПараметрыЭлемента);
	КонецЕсли;
	
	Если ТипЗнч(События) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из События Цикл
			ТаблицаФормы.УстановитьДействие(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаФормы;
	
КонецФункции

// Функция создает группу формы
Функция СоздатьГруппуФормы(Элементы, Имя, Заголовок = "", Вид = Неопределено, Родитель, ВставитьПередЭлементом = Неопределено, ПараметрыЭлемента = Неопределено, События = Неопределено) Экспорт
	
	Если ВставитьПередЭлементом = Неопределено Тогда
		Группа = Элементы.Добавить(Имя, Тип("ГруппаФормы"), Родитель);
	Иначе
		Группа = Элементы.Вставить(Имя, Тип("ГруппаФормы"), Родитель, ВставитьПередЭлементом);
	КонецЕсли;
	
	Если Вид = Неопределено Тогда 
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Иначе
		Группа.Вид = Вид;
	КонецЕсли;
	Группа.Заголовок = Заголовок;
	
	Если ТипЗнч(ПараметрыЭлемента) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Группа, ПараметрыЭлемента);
	КонецЕсли;
	
	Если ТипЗнч(События) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из События Цикл
			Группа.УстановитьДействие(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Группа;
	
КонецФункции

// Функция создает поле формы
Функция СоздатьПолеФормы(Элементы, Имя, Заголовок = "", ПутьКДанным, Вид = Неопределено, Родитель, ВставитьПередЭлементом = Неопределено, ПараметрыЭлемента = Неопределено, СобытияЭлемента = Неопределено) Экспорт
	
	Если ВставитьПередЭлементом = Неопределено Тогда
		Поле = Элементы.Добавить(Имя, Тип("ПолеФормы"), Родитель);
	Иначе
		Поле = Элементы.Вставить(Имя, Тип("ПолеФормы"), Родитель, ВставитьПередЭлементом);
	КонецЕсли;
	
	Если Вид = Неопределено Тогда 
		Поле.Вид = ВидПоляФормы.ПолеВвода;
	Иначе
		Поле.Вид = Вид;
	КонецЕсли;
	Поле.ПутьКДанным = ПутьКДанным;
	
	Поле.Заголовок = Заголовок;
	
	Если ТипЗнч(ПараметрыЭлемента) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Поле, ПараметрыЭлемента);
	ИначеЕсли Поле.Вид = ВидПоляФормы.ПолеВвода Тогда
		ЗаполнитьЗначенияСвойств(Поле, ПараметрыПоляВводаПоУмолчанию());
	ИначеЕсли Поле.Вид = ВидПоляФормы.ПолеФлажка Тогда
		ЗаполнитьЗначенияСвойств(Поле, ПараметрыПоляФлажкаПоУмолчанию());
	КонецЕсли;
	
	Если ТипЗнч(СобытияЭлемента) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из СобытияЭлемента Цикл
			Поле.УстановитьДействие(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Поле;
	
КонецФункции

// Функция создает кнопку формы
Функция СоздатьКнопкуФормы(Элементы, Имя, Заголовок = "", ИмяКоманды, Вид = Неопределено, Родитель, ВставитьПередЭлементом = Неопределено, ПараметрыЭлемента = Неопределено, СобытияЭлемента = Неопределено) Экспорт
	
	Если ВставитьПередЭлементом = Неопределено Тогда
		Поле = Элементы.Добавить(Имя, Тип("КнопкаФормы"), Родитель);
	Иначе
		Поле = Элементы.Вставить(Имя, Тип("КнопкаФормы"), Родитель, ВставитьПередЭлементом);
	КонецЕсли;
	
	Если Вид = Неопределено Тогда 
		Поле.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	Иначе
		Поле.Вид = Вид;
	КонецЕсли;
	Поле.Заголовок = Заголовок;
	Поле.ИмяКоманды = ИмяКоманды;
	
	Если ТипЗнч(ПараметрыЭлемента) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Поле, ПараметрыЭлемента);
	КонецЕсли;
	
	Если ТипЗнч(СобытияЭлемента) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из СобытияЭлемента Цикл
			Поле.УстановитьДействие(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Поле;
	
КонецФункции

// Функция создает декорацию формы
Функция СоздатьДекорациюФормы(Элементы, Имя, Заголовок = "", Вид = Неопределено, Родитель, ВставитьПередЭлементом = Неопределено, ПараметрыЭлемента = Неопределено, СобытияЭлемента = Неопределено) Экспорт
	
	Если ВставитьПередЭлементом = Неопределено Тогда
		Поле = Элементы.Добавить(Имя, Тип("ДекорацияФормы"), Родитель);
	Иначе
		Поле = Элементы.Вставить(Имя, Тип("ДекорацияФормы"), Родитель, ВставитьПередЭлементом);
	КонецЕсли;
	
	Если Вид = Неопределено Тогда 
		Поле.Вид = ВидДекорацииФормы.Надпись;
	Иначе
		Поле.Вид = Вид;
	КонецЕсли;
	Поле.Заголовок = Заголовок;
	
	Если ТипЗнч(ПараметрыЭлемента) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Поле, ПараметрыЭлемента);
	КонецЕсли;
	
	Если ТипЗнч(СобытияЭлемента) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из СобытияЭлемента Цикл
			Поле.УстановитьДействие(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Поле;
	
КонецФункции

// Функция создает команду формы
Функция СоздатьКоманду(Форма, ИмяКоманды, Заголовок, Действие, Картинка = Неопределено, Отображение = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	Команды = Форма.Команды;
	
	Команда = Команды.Найти(ИмяКоманды);
	Если Команда = Неопределено Тогда
		Команда = Команды.Добавить(ИмяКоманды);
		Команда.Заголовок = Заголовок;
		Если Картинка <> Неопределено Тогда
			Команда.Картинка = Картинка;
			Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
		Команда.Действие = Действие;
	КонецЕсли;
	
	Возврат Команда;
	
КонецФункции

// Функция возвращает Истина, если элементы УХ на форму уже добавены
Функция ЭлементыФормыУХУжеСозданы(Форма) Экспорт
	
	ИмяЭлементаПризнака = ИмяЭлементаПризнака();
	Возврат Форма.Элементы.Найти(ИмяЭлементаПризнака) <> Неопределено;
	
КонецФункции

// Функция устанавливает признак того, что элементы УХ добавлены в форму
Процедура ЭлементыФормыУХДобавлены(Форма) Экспорт
	
	ИмяЭлементаПризнака = ИмяЭлементаПризнака();
	
	// Элемент служит признаком наличия на форме элементов УХ
	Если Форма.Элементы.найти(ИмяЭлементаПризнака) = Неопределено Тогда
		Элемент = Форма.Элементы.Добавить(ИмяЭлементаПризнака, Тип("ДекорацияФормы"));
		Элемент.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя элемента, который является признаком добавления элементов УХ 
Функция ИмяЭлементаПризнака() Экспорт
	
	Возврат "ЭлементыУХДобавлены";
	
КонецФункции

Функция ИмяРеквизитаИнициализацияВыполнена() Экспорт

	Возврат "ВстраиваниеУХ_ИнициализацияВыполнена";
	
КонецФункции

Функция НовыйРеквизитИнициализацияВыполнена() Экспорт
	
	Возврат Новый РеквизитФормы(
		ИмяРеквизитаИнициализацияВыполнена(), 
		Новый ОписаниеТипов("Булево"),
		"",
		НСтр("ru = 'Инициализация выполнена'"));
	
КонецФункции

Функция ИнициализацияВыполнена(Форма) Экспорт
	
	ИмяРеквизитаПризнака = ИмяРеквизитаИнициализацияВыполнена();
	
	ДанныеИнициализации = Новый Структура(ИмяРеквизитаПризнака);
	ЗаполнитьЗначенияСвойств(ДанныеИнициализации, Форма);
	
	Возврат (ДанныеИнициализации[ИмяРеквизитаПризнака] = Истина);
	
КонецФункции

// Возвращает структуру с обработчиком события ПриИзменении
Функция ПриИзменении(ИмяОбработчика) Экспорт
	Возврат Новый Структура("ПриИзменении", ИмяОбработчика);
КонецФункции

// параметры поля ввода по умолчанию
Функция ПараметрыПоляВводаПоУмолчанию() Экспорт
	
	ПараметрыПоляВвода28 = Новый Структура;
	ПараметрыПоляВвода28.Вставить("ПоложениеЗаголовка", 		ПоложениеЗаголовкаЭлементаФормы.Лево);
	ПараметрыПоляВвода28.Вставить("АвтоМаксимальнаяШирина",	Ложь);
	ПараметрыПоляВвода28.Вставить("МаксимальнаяШирина",		28);
	
	Возврат ПараметрыПоляВвода28;
	
КонецФункции

// параметры поля флажка по умолчанию
Функция ПараметрыПоляФлажкаПоУмолчанию() Экспорт
	
	ПараметрыПоля = Новый Структура;
	ПараметрыПоля.Вставить("ПоложениеЗаголовка", 		ПоложениеЗаголовкаЭлементаФормы.Право);
	ПараметрыПоля.Вставить("АвтоМаксимальнаяШирина",	Ложь);
	ПараметрыПоля.Вставить("МаксимальнаяШирина",		28);
	
	Возврат ПараметрыПоля;
	
КонецФункции

// пустой список параметров
Функция БезПараметров() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

// пустой список параметров
Функция ПараметрыНевидимойГруппы() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	Результат.Вставить("Отображение", ОтображениеОбычнойГруппы.Нет);
	Результат.Вставить("ОтображатьЗаголовок", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Добавляет связь параметров выбора для элемента
Процедура ДобавитьСвязьПараметровВыбора(Элемент, Отбор, ПутьКДанным) экспорт
	
	Если Элемент.СвязиПараметровВыбора = неопределено Тогда
		Массив = Новый Массив;
	Иначе
		Массив = Новый Массив(Элемент.СвязиПараметровВыбора);
	КонецЕсли;
	
	НоваяСвязь = Новый СвязьПараметраВыбора(Отбор, ПутьКДанным);
	
	Индекс = НайтиПараметрПоИмени(Массив, Отбор);
	Если Индекс = неопределено Тогда
		Массив.Добавить(НоваяСвязь);
	Иначе
		Массив[Индекс] = НоваяСвязь;
	КонецЕсли;
	
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(Массив);
	
КонецПроцедуры

// Удалить связь параметров выбора для элемента
Процедура УдалитьСвязьПараметровВыбора(Элемент, Отбор, ПутьКДанным = неопределено) экспорт
	
	Массив = Новый Массив(Элемент.СвязиПараметровВыбора);
	
	Поз = 0;
	Пока Поз < Массив.Количество() Цикл
		Связь = Массив[Поз];
		
		Если Связь.Имя = Отбор И (ПутьКДанным = неопределено ИЛИ Связь.ПутьКДанным = ПутьКДанным) Тогда
			Массив.Удалить(Поз);
		Иначе
			Поз = Поз + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(Массив);
	
КонецПроцедуры

// Добавляет параметр выбора для элемента
Процедура ДобавитьПараметрВыбора(Элемент, Отбор, Значение) экспорт
	
	Если Элемент.ПараметрыВыбора = неопределено Тогда
		Массив = Новый Массив;
	Иначе
		Массив = Новый Массив(Элемент.ПараметрыВыбора);
	КонецЕсли;
	
	НовыйПараметр = Новый ПараметрВыбора(Отбор, Значение);
	
	Индекс = НайтиПараметрПоИмени(Массив, Отбор);
	Если Индекс = неопределено Тогда
		Массив.Добавить(НовыйПараметр);
	Иначе
		Массив[Индекс] = НовыйПараметр;
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Массив);
	
КонецПроцедуры

// Удалить параметр выбора для элемента
Процедура УдалитьПараметрВыбора(Элемент, Отбор) экспорт
	
	Массив = Новый Массив(Элемент.ПараметрыВыбора);
	
	Поз = 0;
	Пока Поз < Массив.Количество() Цикл
		Параметр = Массив[Поз];
		
		Если Параметр.Имя = Отбор Тогда
			Массив.Удалить(Поз);
		Иначе
			Поз = Поз + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Массив);
	
КонецПроцедуры

Функция ДополнитьСтруктуру(Источник, Дополнение) Экспорт
	
	Результат = Новый Структура(Новый ФиксированнаяСтруктура(Источник));
	Для Каждого КлючЗначение Из Дополнение Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверить существование реквизита формы, и если он отсутствует, создает
//  и добавляет его в массив ДобавляемыеРеквизиты.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, для которой нужно проверить
//						  	существование реквизита.
//  ДобавляемыеРеквизиты - Массив - массив реквизитов формы, в который
//  						будет добавлен реквизит.
//  Имя - Строка - имя реквизита формы. 
//  ТипРеквизита - Строка | Массив(Тип) | ОписаниеТипов - описание типа
//							реквизита. Параметр будет передан в конструктор
//							объекта ОписаниеТипов.
//  Путь - Строка - Путь к создаваемому реквизиту. Не включает имя реквизита. 
//  Заголовок - Строка - заголовок. Если не указан, то будет использовано имя.
//  СохраняемыеДанные - Булево - Реквизит содержит сохраняемые данные.
//							Истина - сохраняемый реквизит формы.
//							Значение по умолчанию: Ложь.
//
Процедура СоздатьДобавитьРеквизитФормы(Форма,
								ДобавляемыеРеквизиты,
								Имя,
								ТипРеквизита,
								Путь="",
								Заголовок="",
								СохраняемыеДанные=Ложь) Экспорт
	флРеквизитСуществует =
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			Форма, Имя);
	Если НЕ флРеквизитСуществует Тогда 
		ОписаниеТиповРеквизита = Новый ОписаниеТипов(ТипРеквизита);
		Реквизит = Новый РеквизитФормы(
			Имя, ОписаниеТиповРеквизита, Путь, Заголовок, СохраняемыеДанные);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиПараметрПоИмени(Массив, Имя)
	
	Поз = 0;
	Пока Поз < Массив.Количество() Цикл
		Параметр = Массив[Поз];
		Если Параметр.Имя = Имя Тогда
			Возврат Поз;
		КонецЕсли;
		Поз = Поз + 1;
	КонецЦикла;
	
	Возврат неопределено;
	
КонецФункции

#КонецОбласти
